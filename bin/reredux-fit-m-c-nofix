#!/usr/bin/env python
from __future__ import print_function
import os
import numpy
from argparse import ArgumentParser
import reredux
import fitsio
import esutil as eu

parser = ArgumentParser()

parser.add_argument('run', help='run to use in fit')

parser.add_argument('--onem', action='store_true',help="fit a single m instead of m1,m2")

parser.add_argument('--show',action='store_true',help='show plot')
parser.add_argument('--yrange', help="yrange of plot")
parser.add_argument('--xrange', help="xrange of plot")


parser.add_argument('--fit-only',action='store_true',
                    help='get the means from the written file')

parser.add_argument('--cache',action='store_true',
                    help=('cache the file subset locally; use the cache '
                          'if available'))

SIGMA2_MIN_CONSTANT_GROUND = 4.     # 2**2
NORMALIZATION_CONSTANT_SPACE = 1.232
NORMALIZATION_CONSTANT_GROUND = NORMALIZATION_CONSTANT_SPACE

CFID = 2.e-4
MFID = 2.e-3


class MCFitter(object):
    def __init__(self, shear_true, shear_diff, shear_err):
        self.shear_true=shear_true
        self.shear_diff=shear_diff
        self.shear_err=shear_err

        self.npars=3

        self._set_guess()

    def get_result(self):
        return self._result

    def dofit(self):
        from scipy.optimize import leastsq
        res=leastsq(self._errfunc, self.guess, full_output=1)

        pars, pcov0, infodict, errmsg, ier = res
        if ier == 0:
            # wrong args, this is a bug
            raise ValueError(errmsg)

        numiter = infodict['nfev']
        pcov=None
        perr=None

        if pcov0 is not None:
            pcov = self._scale_leastsq_cov(pars, pcov0)

            d=numpy.diag(pcov)
            w,=numpy.where(d < 0)

            if w.size == 0:
                # only do if non negative
                perr = numpy.sqrt(d)
        
        self._result={'pars':pars, 'pcov':pcov, 'perr':perr}


    def _set_guess(self):
        c1, c1_err, m1, m1_err, covar = fitline(self.shear_true[:,0],
                                                self.shear_diff[:,0])
        c2, c2_err, m2, m2_err, covar = fitline(self.shear_true[:,1],
                                                self.shear_diff[:,1])

        m = 0.5*(m1 + m2)

        self.guess = numpy.array([m, c1, c2])

    def eval_pars(self, pars):
        """
        [m, c1, c2]
        """
        return pars[0]*self.shear_true + pars[1:1+2]

    def _errfunc(self, pars):
        """
        [m, c1, c2]
        """

        model = self.eval_pars(pars)
        diff = (model-self.shear_diff)/self.shear_err
        return diff.ravel()

    def _scale_leastsq_cov(self, pars, pcov):
        """
        Scale the covariance matrix returned from leastsq; this will
        recover the covariance of the parameters in the right units.
        """

        # is total size right here?
        dof = (self.shear_diff.size-len(pars))
        s_sq = (self._errfunc(pars)**2).sum()/dof
        return pcov * s_sq 

    def __call__(self, x):
        """
        pars order same as for numpy.poly1d
        """
        return self.eval_pars(self._result['pars'])

    def __repr__(self):
        if hasattr(self,'_result'):
            pars=self._result['pars']
            perr=self._result['perr']

            if perr is not None:
                rep = """(d1,d2) = m*(s1,s2) + (c1,c2)
    m:  %g +/- %g
    c1: %g +/- %g
    c2: %g +/- %g""" % (pars[0],perr[0],pars[1],perr[1],pars[2],perr[2])

            else:
                rep = """(d1,d2) = m*(s1,s2) + (c1,c2)
    m:  %g +/- None
    c1: %g +/- None
    c2: %g +/- None""" % (pars[0],pars[1],pars[2])

        else:
            rep=""

        return rep



# quick line fit pulled from great3-public code
def _calculateSvalues(xarr, yarr, sigma2=1.):
    """Calculates the intermediate S values required for basic linear regression.

    See, e.g., Numerical Recipes (Press et al 1992) Section 15.2.
    """
    if len(xarr) != len(yarr):
        raise ValueError("Input xarr and yarr differ in length!")
    if len(xarr) <= 1:
        raise ValueError("Input arrays must have 2 or more values elements.")

    S = len(xarr) / sigma2
    Sx = numpy.sum(xarr / sigma2)
    Sy = numpy.sum(yarr / sigma2)
    Sxx = numpy.sum(xarr * xarr / sigma2)
    Sxy = numpy.sum(xarr * yarr / sigma2)
    return (S, Sx, Sy, Sxx, Sxy)

def fitline(xarr, yarr):
    """Fit a line y = a + b * x to input x and y arrays by least squares.

    Returns the tuple (a, b, Var(a), Cov(a, b), Var(b)), after performing an internal estimate of
    measurement errors from the best-fitting model residuals.

    See Numerical Recipes (Press et al 1992; Section 15.2) for a clear description of the details
    of this simple regression.
    """
    # Get the S values (use default sigma2, best fit a and b still valid for stationary data)
    S, Sx, Sy, Sxx, Sxy = _calculateSvalues(xarr, yarr)
    # Get the best fit a and b
    Del = S * Sxx - Sx * Sx
    a = (Sxx * Sy - Sx * Sxy) / Del
    b = (S * Sxy - Sx * Sy) / Del
    # Use these to estimate the sigma^2 by residuals from the best-fitting model
    ymodel = a + b * xarr
    sigma2 = numpy.mean((yarr - ymodel)**2)
    # And use this to get model parameter error estimates
    var_a  = sigma2 * Sxx / Del
    cov_ab = - sigma2 * Sx / Del
    var_b  = sigma2 * S / Del

    a_err = numpy.sqrt(var_a)
    b_err = numpy.sqrt(var_b)
    return a, a_err, b, b_err, cov_ab


def calc_q(fits):

    if 'c1' in fits.dtype.names:
        m1=fits['m'][0]
        m2=fits['m'][0]
        c1=fits['c1'][0]
        c2=fits['c2'][0]
    else:
        m1=fits['m'][0,0]
        m2=fits['m'][0,1]
        c1=fits['c'][0,0]
        c2=fits['c'][0,1]

    sigma2_min = SIGMA2_MIN_CONSTANT_GROUND 
    norm = NORMALIZATION_CONSTANT_GROUND 

    num = 2000.0 * norm
    denom = numpy.sqrt(  (c1 / CFID)**2 
                       + (c2 / CFID)**2
                       + (m1 / MFID)**2
                       + (m2 / MFID)**2
                       + sigma2_min)

    Q = num/denom
    
    print("  Q: %g" % Q)

    return Q

def doplot(args, data, fits):
    import biggles

    Q=calc_q(fits)

    if args.yrange is not None:
        yrange=[float(r) for r in args.yrange.split(',')]
    else:
        yrange=[-0.01,0.01]

    xrng=args.xrange
    if xrng is not None:
        xrng=[float(r) for r in args.xrange.split(',')]

    tab=biggles.Table(1,2)
    tab.aspect_ratio=0.5

    diff = data['shear'] - data['shear_true']

    plts=[]
    for i in [0,1]:

        x = data['shear_true'][:,i]
        plt =biggles.plot(
            x,
            diff[:,i],
            xlabel='shear%d true' % (i+1,),
            ylabel='shear%d diff' % (i+1,),
            yrange=yrange,
            xrange=xrng,
            visible=False,
        )
        yfit=fits['m'][0,i]*x + fits['c'][0,i]

        c=biggles.Curve(x, yfit, color='red')
        z=biggles.Curve(x, x*0, color='black')
        plt.add(c,z)

        mstr='m%d: %.2g +/- %.2g' % (i+1,fits['m'][0,i],fits['merr'][0,i])
        cstr='c%d: %.2g +/- %.2g' % (i+1,fits['c'][0,i],fits['cerr'][0,i])
        mlab=biggles.PlotLabel(0.1,0.9,
                               mstr,
                               halign='left')
        clab=biggles.PlotLabel(0.1,0.85,
                               cstr,
                               halign='left')
        plt.add(mlab,clab)
        if i==0:
            Qstr='Q: %d' % (int(Q),)
            Qlab=biggles.PlotLabel(0.1,0.8,
                                   Qstr,
                                   halign='left')
            plt.add(Qlab)


        tab[0,i] = plt

    fname=reredux.files.get_fit_file(args.run,
                                     extra='fit-m-c',
                                     ext='eps')
    eu.ostools.makedirs_fromfile(fname)
    print("writing:",fname)
    tab.write_eps(fname)

    if args.show:
        tab.show(width=1000, height=1000)

def write_fits(args, fits):
    fname=reredux.files.get_fit_file(args.run, extra='fit-m-c')

    eu.ostools.makedirs_fromfile(fname)
    print("writing fit data to file:",fname)
    fitsio.write(fname, fits, clobber=True)


def get_cache_file(run):
    tdir=os.environ['TMPDIR']
    tfile= reredux.files.get_collated_file(run)
    tfile=os.path.basename(tfile)

    tfile=os.path.join(tdir, tfile)
    return tfile


def read_cached_data(conf, run):
    tfile=get_cache_file(run)
    if os.path.exists(tfile):
        print("reading cache:",tfile)
        data=fitsio.read(tfile)
    else:
        data=read_data(conf,run)
        print("writing cache:",tfile)
        fitsio.write(tfile, data, clobber=True)

    return data

def read_data(conf, run):

    model=conf['model_pars'].keys()[0]

    columns=[
        '%s_mcal_g' % model,
        '%s_mcal_gpsf' % model,
        '%s_mcal_R' % model,
        '%s_mcal_Rpsf' % model,
        'shear_index',
        'flags'
    ]
    print("reading columns:",columns)
    data=reredux.files.read_collated(run, columns=columns)

    w,=numpy.where(data['flags']==0)
    data=data[w]

    return data



def get_mean_struct(n):
    dt=[('shear','f8',2),
        ('shear_true','f8',2),
        ('shear_err','f8',2)]

    means = numpy.zeros(n, dtype=dt)
    return means

def read_means(args):
    return reredux.files.read_fit_file(args.run,
                                       extra='shear-means')
def write_means(args, means):
    fname=reredux.files.get_fit_file(args.run,
                                     extra='shear-means')
    eu.ostools.makedirs_fromfile(fname)

    print("writing:",fname)
    fitsio.write(fname, means, clobber=True)


def print_shear(ind, num, shear, shear_err):
    mess="  %d: %d  %g +/- %g  %g +/- %g"
    tup=(ind, num, shear[0],shear_err[0], shear[1],shear_err[1])
    print(mess % tup)


def get_arrays(conf, data):

    model=conf['model_pars'].keys()[0]

    gfield = '%s_mcal_g' % model
    gpsf_field = '%s_mcal_gpsf' % model

    Rfield = '%s_mcal_R' % model
    Rpsf_field = '%s_mcal_Rpsf' % model


    g = data[gfield]
    gpsf = data[gpsf_field]


    R = data[Rfield].copy()

    Rpsf = data[Rpsf_field].copy()

    return g, gpsf, R, Rpsf

def get_averages(conf, data, show_progress=True):

    sconf=conf['sconf']
    shears = sconf['shear']['shears']

    h,rev = eu.stat.histogram(data['shear_index'], rev=True)
    nind = h.size

    g, gpsf, R, Rpsf = get_arrays(conf, data)

    means=get_mean_struct(nind)

    for i in xrange(nind):
        if show_progress:
            print("shear index:",i)

        w=rev[ rev[i]:rev[i+1] ]

        shear_true = shears[i]

        Rmean = R[w].mean(axis=0)
        Rinv = numpy.linalg.inv(Rmean)

        psf_corr  = (gpsf[w]*Rpsf[w]).mean(axis=0)

        gmean     = g[w].mean(axis=0)
        shear     = numpy.dot(Rinv, gmean-psf_corr)
        shear_err = g[w].std(axis=0)/numpy.sqrt(w.size)
        shear_err = numpy.dot(Rinv, shear_err)

        means['shear'][i] = shear
        means['shear_err'][i] = shear_err
        means['shear_true'][i] = shear_true

    return means

def print_m_c(sindex, m, merr, c, cerr, r=None):
    fmt = '  m{i}: %.3e +/- %.3e c{i}: %.3e +/- %.3e'.format(i=sindex)
    if r is not None:
        fmt += '  r{i}: %.3g'.format(i=sindex)
        print(fmt % (m, merr, c, cerr,r))
    else:
        print(fmt % (m, merr, c, cerr))

def fit_m_c(data, doprint=True, onem=False):
    import fitting
    import mcmc
    import esutil as eu

    strue = data['shear_true']
    sdiff = data['shear'] - data['shear_true']
    serr  = data['shear_err']

    m = numpy.zeros(2)
    merr = numpy.zeros(2)
    c = numpy.zeros(2)
    cerr = numpy.zeros(2)


    if onem:
        fits=numpy.zeros(1, dtype=[('m','f8'),
                                   ('merr','f8'),
                                   ('c1','f8'),
                                   ('c1err','f8'),
                                   ('c2','f8'),
                                   ('c2err','f8')])


        fitter=MCFitter(strue, sdiff, serr)
        fitter.dofit()
        res=fitter.get_result()

        pars=res['pars']
        perr=res['perr']
        fits['m'] = pars[0]
        fits['c1'] = pars[1]
        fits['c2'] = pars[2]
        fits['merr'] = perr[0]
        fits['c1err'] = perr[1]
        fits['c2err'] = perr[2]

        fmt = '  m: %.3e +/- %.3e c1: %.3e +/- %.3e c2: %.3e +/- %.3e'
        print(fmt % (pars[0],perr[0],
                     pars[1],perr[1],
                     pars[2],perr[2]))
        return fits

    fits=numpy.zeros(1, dtype=[('m','f8',2),
                               ('merr','f8',2),
                               ('c','f8',2),
                               ('cerr','f8',2),
                               ('r','f8',2)])

    for i in [0,1]:
        w,=numpy.where(strue[:,i] != 0.0)
        if w.size == 0:
            print("shear is zero, mean for all is")
            m,e=eu.stat.wmom(data['shear'][:,i],
                             1.0/data['shear_err'][:,i]**2,
                             calc_err=True)
            print("s%d: %.3e +/- %.3e" % (i+1,m,e))
        else:
            if False:
                c, c_err, m, m_err, covar = fitline(strue[:,i], sdiff[:,i])
                r = covar/numpy.sqrt(m_err**2 * c_err**2)
                fits['m'][0,i] = m
                fits['merr'][0,i] = m_err
                fits['c'][0,i] = c
                fits['cerr'][0,i] = c_err
                fits['r'][0,i] = r

                if doprint:
                    print_m_c(i+1, m,m_err,c,c_err, r=r)
            else:
                fit = fitting.fit_line(strue[:,i],
                                       sdiff[:,i],
                                       yerr=serr[:,i])
                res = fit.get_result()
                p=res['pars']
                perr=res['perr']

                if doprint:
                    print_m_c(i+1, p[0],perr[0],p[1],perr[1])

                fits['m'][0,i] = p[0]
                fits['merr'][0,i] = perr[0]
                fits['c'][0,i] = p[1]
                fits['cerr'][0,i] = perr[1]

    return fits

def fit_m_c_boot(fits, conf, data, nboot):

    nd=data.size

    mvals = numpy.zeros( (nboot,2) )
    cvals = numpy.zeros( (nboot,2) )

    for i in xrange(nboot):
        print("bootstrap: %d/%d" % (i+1,nboot))

        rind     = numpy.random.randint(0, nd, nd)

        means = get_averages(conf, data[rind], show_progress=False)
        tfits=fit_m_c(means, doprint=False)

        mvals[i] = tfits['m']
        cvals[i] = tfits['c']

    mmean = mvals.mean(axis=0)
    cmean = cvals.mean(axis=0)
    merr = mvals.std(axis=0)
    cerr = cvals.std(axis=0)

    print("-"*70)
    print("bootstrapped")
    for i in [0,1]:
        print_m_c(i+1, fits['m'][0,i], merr[i], fits['c'][0,i], cerr[i])

    newfits = fits.copy()
    newfits['merr'][0,:] = merr
    newfits['cerr'][0,:] = cerr

    return newfits

def fit_m_c_jack_byobj(conf, data, njack):

    sconf=conf['sconf']
    true_shears = sconf['shear']['shears']

    g, gpsf, R, Rpsf = get_arrays(conf, data)

    h,rev = eu.stat.histogram(data['shear_index'], rev=True)

    nfield = h.size

    g_sums = numpy.zeros( (nfield, 2) )
    gpsf_sums = numpy.zeros( (nfield, 2) )
    R_sums = numpy.zeros( (nfield, 2, 2) )
    #Rpsf_sums = numpy.zeros( (nfield, 2) )
    psf_corr_sums = numpy.zeros( (nfield, 2) )

    means=get_mean_struct(nfield)
    tmeans=get_mean_struct(nfield)
    means['shear_true'] = true_shears
    tmeans['shear_true'] = true_shears

    print("getting overall sums")
    # get overall sums and mean
    for i in xrange(nfield):
        print("shear index:",i)
        w=rev[ rev[i]:rev[i+1] ]

        g_sums[i]         = g[w].sum(axis=0)
        gpsf_sums[i]      = gpsf[w].sum(axis=0)
        R_sums[i]         = R[w].sum(axis=0)
        psf_corr_sums[i]  = (gpsf[w]*Rpsf[w]).sum(axis=0)

        gmean         = g_sums[i]/w.size
        Rmean         = R_sums[i]/w.size
        psf_corr_mean = psf_corr_sums[i]/w.size

        Rinv = numpy.linalg.inv(Rmean)
        shear     = numpy.dot(Rinv, gmean-psf_corr_mean)
        shear_err = g[w].std(axis=0)/numpy.sqrt(w.size)
        shear_err = numpy.dot(Rinv, shear_err)

        means['shear'][i] = shear

    fits=fit_m_c(means, doprint=True)

    mvals = numpy.zeros( (njack,2) )
    cvals = numpy.zeros( (njack,2) )

    for ijack in xrange(njack):
        print("    jack %d/%d" % (ijack+1,njack))
        for i in xrange(nfield):
            w=rev[ rev[i]:rev[i+1] ]

            nkeep = w.size//njack

            beg = ijack*nkeep
            end = (ijack+1)*nkeep
            wkeep = w[beg:end]

            tg_sum         = g[wkeep].sum(axis=0)
            tgpsf_sum      = gpsf[wkeep].sum(axis=0)
            tR_sum         = R[wkeep].sum(axis=0)
            tpsf_corr_sum  = (gpsf[wkeep]*Rpsf[wkeep]).sum(axis=0)

            jg_sum        = g_sums[i] - tg_sum
            jgpsf_sum     = gpsf_sums[i] - tgpsf_sum
            jR_sum        = R_sums[i] - tR_sum
            jpsf_corr_sum = psf_corr_sums[i] - tpsf_corr_sum

            nuse = h[i] - wkeep.size
            gmean         = jg_sum/nuse
            Rmean         = jR_sum/nuse
            psf_corr_mean = jpsf_corr_sum/nuse

            Rinv = numpy.linalg.inv(Rmean)
            shear     = numpy.dot(Rinv, gmean-psf_corr_mean)

            tmeans['shear'][i] = shear

        tfits=fit_m_c(tmeans, doprint=False)

        mvals[ijack] = tfits['m']
        cvals[ijack] = tfits['c']

    j_mmean=mvals.mean(axis=0)
    j_cmean=cvals.mean(axis=0)

    merr2 = mvals.var(axis=0) * (njack-1.0) * (njack-1.0)/njack
    cerr2 = cvals.var(axis=0) * (njack-1.0) * (njack-1.0)/njack

    merr = numpy.sqrt(merr2)
    cerr = numpy.sqrt(cerr2)

    fits['merr'] = merr
    fits['cerr'] = cerr

    print('-'*70)
    print('jackknifed by obj')
    print("jackknife means:")
    print("    m: %.3e %.3e" % (j_mmean[0],j_mmean[1]))
    print("    c: %.3e %.3e" % (j_cmean[0],j_cmean[1]))

    for i in [0,1]:
        print_m_c(i+1,
                  fits['m'][0,i],
                  fits['merr'][0,i],
                  fits['c'][0,i],
                  fits['cerr'][0,i])


    return fits, means


def fit_m_c_jack_by_field(fits, means):

    nfield = means.size

    jfits=numpy.zeros(nfield, dtype=fits.dtype)

    ind = numpy.arange(nfield)
    for i in xrange(nfield):

        w,=numpy.where(ind != i)

        tfits=fit_m_c(means[w], doprint=False)

        jfits[i] = tfits

    merr2 = jfits['m'].var(axis=0) * (nfield-1.0) * (nfield-1.0)/nfield
    cerr2 = jfits['c'].var(axis=0) * (nfield-1.0) * (nfield-1.0)/nfield

    merr = numpy.sqrt(merr2)
    cerr = numpy.sqrt(cerr2)

    newfits = fits.copy()
    newfits['merr'] = merr
    newfits['cerr'] = cerr

    print('-'*70)
    print('jackknifed by field')
    for i in [0,1]:
        print_m_c(i+1,
                  newfits['m'][0,i],
                  newfits['merr'][0,i],
                  newfits['c'][0,i],
                  newfits['cerr'][0,i])

    return newfits

def main():
    args = parser.parse_args()

    conf=reredux.files.read_config(args.run)
    sconf=reredux.files.read_egret_config(conf['reredux_config'])

    conf['sconf'] = sconf


    # if only doing the fit, and not bootstrapping
    if args.fit_only:
        means = read_means(args)
    else:

        if args.cache:
            data=read_cached_data(conf,args.run)
        else:
            data=read_data(conf, args.run)

        means = get_averages(conf, data)
        write_means(args, means)

    fits=fit_m_c(means, onem=args.onem)
    Q=calc_q(fits)

    write_fits(args, fits)

    if not args.onem:
        # need to adapt
        doplot(args, means, fits)

main()
