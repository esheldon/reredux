#!/usr/bin/env python
from __future__ import print_function
import os
import fitsio
import reredux
from reredux import files
import esutil as eu

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('run',help='run identifier')
parser.add_argument('--allow-missing',action='store_true',
                    help='skip missing ones')

def make_dir(collated_file):
    d=os.path.dirname(collated_file)
    if not os.path.exists(d):
        print("making dir:",d)
        os.makedirs(d)

def read_meds_data(version, fnum):
    fname=files.get_meds_file(version, fnum)
    if not os.path.exists(fname):
        print("missing meds file:",fname)
        return None
    else:
        return fitsio.read(fname, ext='object_data')

def main():
    args = parser.parse_args()
    add_shear_index=True

    runconf = files.read_config(args.run)

    version=runconf['reredux_config']
    reredux_conf = files.read_egret_config(version)

    collated_file=files.get_collated_file(args.run)
    make_dir(collated_file)

    #ntot = reredux_conf['nperfile']
    ntot = reredux_conf['Ngals']
    npersplit = runconf['nper']

    beglist,endlist = reredux.batch.get_splits(ntot, npersplit)

    #nfiles = reredux_conf['nfiles']
    nfiles = reredux_conf['Nfiles']

    first=True
    with fitsio.FITS(collated_file,'rw',clobber=True) as fits:
        for fnum in xrange(nfiles):
            print("%d/%d" % (fnum+1, nfiles))

            if add_shear_index:
                mdata=read_meds_data(version, fnum)
                if mdata is None:
                    continue
                if 'shear_index' not in mdata:
                    print("    ** shear_index not found, not copying it **")
                    add_shear_index=False
                else:
                    shear_indices = mdata['shear_index']

            for beg,end in zip(beglist, endlist):
                fname=files.get_output_file(args.run, fnum, beg, end)

                if not os.path.exists(fname):
                    mess="    missing: %s" % fname
                    if args.allow_missing:
                        print(mess)
                        continue
                    else:
                        raise RuntimeError(mess)
                
                print("    ",fname)
                data=fitsio.read(fname)

                if add_shear_index:
                    data = eu.numpy_util.add_fields(data, [('shear_index','i8')])
                    data['shear_index'] = shear_indices[data['id']]

                if first:
                    first=False
                    fits.write(data)
                else:
                    fits[-1].append(data)

    print("collated file is:",collated_file)
main()
