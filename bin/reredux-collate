#!/usr/bin/env python
from __future__ import print_function
import os
import fitsio
import reredux
from reredux import files

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('run',help='run identifier')
parser.add_argument('--allow-missing',action='store_true',
                    help='skip missing ones')

def make_dir(collated_file):
    d=os.path.dirname(collated_file)
    if not os.path.exists(d):
        print("making dir:",d)
        os.makedirs(d)

def main():
    args = parser.parse_args()

    runconf = files.read_config(args.run)
    reredux_conf = files.read_config(runconf['reredux_config'])

    collated_file=files.get_collated_file(args.run)
    make_dir(collated_file)

    ntot = reredux_conf['nperfile']
    npersplit = runconf['nper']

    beglist,endlist = reredux.batch.get_splits(ntot, npersplit)

    nfiles = reredux_conf['nfiles']

    first=True
    with fitsio.FITS(collated_file,'rw',clobber=True) as fits:
        for fnum in xrange(nfiles):
            print("%d/%d" % (fnum+1, nfiles))

            for beg,end in zip(beglist, endlist):
                fname=files.get_output_file(args.run, fnum, beg, end)

                if not os.path.exists(fname):
                    mess="    missing: %s" % fname
                    if args.allow_missing:
                        print(mess)
                        continue
                    else:
                        raise RuntimeError(mess)
                
                print("    ",fname)
                data=fitsio.read(fname)

                if first:
                    first=False
                    fits.write(data)
                else:
                    fits[-1].append(data)

    print("collated file is:",collated_file)
main()
