#!/usr/bin/env python
from __future__ import print_function
import os
import shutil
import fitsio
import reredux
from reredux import files
import esutil as eu

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('run',help='run identifier')
parser.add_argument('--allow-missing',action='store_true',
                    help='skip missing ones')
parser.add_argument('--temp',action='store_true',
                    help='use a temporary directory')

def get_collated_file(run, temp=False):

    fname=files.get_collated_file(run)

    if temp:
        tdir=os.environ['TMPDIR']
        bname=os.path.basename(fname)
        fname=os.path.join(tdir, bname)

    return fname

def read_meds_data(sim_type,version, fnum):
    fname=files.get_meds_file(version, fnum, type=sim_type)
    if not os.path.exists(fname):
        print("missing meds file:",fname)
        return None
    else:
        return fitsio.read(fname, ext='object_data')

def main():
    args = parser.parse_args()

    runconf = files.read_config(args.run)
    sim_type=runconf.get('sim_type','egret')

    version=runconf['reredux_config']
    reredux_conf = files.read_wombat_config(version)

    if 'shear' in reredux_conf:
        shear=reredux_conf['shear']
    else:
        shear=None

    collated_file=get_collated_file(args.run)
    eu.ostools.makedirs_fromfile(collated_file)

    if args.temp:
        final_file=collated_file
        collated_file=get_collated_file(args.run, temp=True)
        eu.ostools.makedirs_fromfile(collated_file)

    print("writing to:",collated_file)

    ntot = reredux_conf['Ngals']
    npersplit = runconf['nper']

    beglist,endlist = reredux.batch.get_splits(ntot, npersplit)

    nfiles = reredux_conf['Nfiles']

    first=True
    with fitsio.FITS(collated_file,'rw',clobber=True) as fits:
        for fnum in xrange(nfiles):
            print("%d/%d" % (fnum+1, nfiles))

            mdata=read_meds_data(sim_type,version, fnum)
            if mdata is None:
                continue

            if shear is None:
                truth_file=files.get_truth_file(version, fnum)
                truth_data=fitsio.read(truth_file)

            for beg,end in zip(beglist, endlist):
                fname=files.get_output_file(args.run, fnum, beg, end)

                if not os.path.exists(fname):
                    mess="    missing: %s" % fname
                    if args.allow_missing:
                        print(mess)
                        continue
                    else:
                        raise RuntimeError(mess)

                print("    ",fname)
                data=fitsio.read(fname)
                addf=[('shear_index','i8'),('shear_true','f8',2)]
                data = eu.numpy_util.add_fields(data, addf)

                if shear is not None:
                    data['shear_index'] = 0
                    data['shear_true'][:,0] = shear[0]
                    data['shear_true'][:,1] = shear[1]
                else:
                    data['shear_index'] = fnum
                    data['shear_true'][:,0] = truth_data['g1'][beg:end+1]
                    data['shear_true'][:,1] = truth_data['g2'][beg:end+1]

                if first:
                    first=False
                    fits.write(data)
                else:
                    fits[-1].append(data)

    if args.temp:
        print("moving %s -> %s" % (collated_file, final_file))
        shutil.move(collated_file, final_file)

        collated_file=final_file

    print("collated file is:",collated_file)

main()
