#!/usr/bin/env python
"""
usage: reredux-average run
"""
from __future__ import print_function
import os
import numpy
from numpy import median, arange, dot
from argparse import ArgumentParser
import reredux
import ngmix
import fitsio

parser=ArgumentParser()

parser.add_argument('run',help='run identifier')
parser.add_argument('corr_run',help='run identifier for corrections')
#parser.add_argument('model',help='model used for fitting')
parser.add_argument('nboot',type=int,help='number of bootstrap samples')

def print_shear(res, strue, type='mean'):

    print("shear type:",type)

    if type=='mean':
        shear=res['shear']
    else:
        shear=res['shear_med']

    mess='s1: %.5f +/- %.5f   s2: %.5f +/- %.5f'
    mess = mess % (shear[0],
                   res['shear_err'][0],
                   shear[1],
                   res['shear_err'][1])
    print(mess)

    mess=''

    if strue[0] != 0.0:
        s='frac1: %.2g +/- %.2g'
        s=s % (shear[0]/strue[0]-1, res['shear_err'][0]/strue[0])
        mess += s
    if strue[1] != 0.0:
        s='frac2: %.2g +/- %.2g'
        s=s % (shear[1]/strue[1]-1, res['shear_err'][1]/strue[1])
        mess += s

    print(mess)

def get_median_shear(model, data):

    g    = data['%s_mcal_g' % model]
    gpsf = data['%s_mcal_gpsf' % model]
    R    = data['%s_mcal_R' % model]
    Rpsf = data['%s_mcal_Rpsf' % model]

    mg = median(g, axis=0)
    mR = median(R, axis=0)
    mcorr = median(Rpsf*gpsf, axis=0)

    Rinv = numpy.linalg.inv(mR)
    shear = dot( Rinv, mg-mcorr )

    return shear

def average_shear(model, data, corrdata, nboot):

    shear_med=get_median_shear(model, data)
    print("shear_med:",shear_med)

    res=ngmix.metacal.bootstrap_shear(data['%s_mcal_g' % model],
                                      data['%s_mcal_gpsf' % model],
                                      corrdata['%s_mcal_R' % model],
                                      corrdata['%s_mcal_Rpsf' % model],nboot,
                                      verbose=True)

    res['shear_med'] = shear_med
    return res


def get_struct():
    dt=[
        ('shear','f8',2),
        ('shear_err','f8',2),
        ('shear_cov','f8',(2,2)),

        ('shear_med','f8',2),

        ('R','f8', (2,2) ),
        ('Rpsf','f8', 2),
        ('psf_corr','f8', 2),

        ('g_sum','f8',2),
        ('R_sum','f8',(2,2)),
        ('Rpsf_sum','f8',2),
        ('psf_corr_sum','f8',2),

        ('ng','i8'),
        ('nR','i8'),
       ]

    return numpy.zeros(1, dtype=dt)

def copy_to_struct(res):
    data=get_struct()

    data['shear'][0] = res['shear']
    data['shear_err'][0] = res['shear_err']
    data['shear_cov'][0] = res['shear_cov']

    data['shear_med'][0] = res['shear_med']

    data['R'][0] = res['R']
    data['Rpsf'][0] = res['Rpsf']
    data['psf_corr'][0] = res['psf_corr']

    data['g_sum'][0] = res['g_sum']
    data['R_sum'][0] = res['R_sum']
    data['Rpsf_sum'][0] = res['Rpsf_sum']
    data['psf_corr_sum'][0] = res['psf_corr_sum']

    data['ng'][0] = res['ng']
    data['nR'][0] = res['nR']

    return data

def makedirs(run):
    d=reredux.files.get_averaged_dir(run)
    if not os.path.exists(d):
        print("making dir:",d)
        os.makedirs(d)

def write_averaged(res, args):
    data=copy_to_struct(res)
    makedirs(args.run)

    ofile = reredux.files.get_averaged_file(args.run, args.corr_run)
    print("writing file:",ofile)
    fitsio.write(ofile, data, clobber=True)

def main():
    args = parser.parse_args()

    conf=reredux.files.read_config(args.run)
    sconf=reredux.files.read_config(conf['reredux_config'])

    # assuming only one model was fit
    model=conf['model_pars'].keys()[0]

    columns=['flags',
             '%s_mcal_g' % model,
             '%s_mcal_gpsf' % model,
             '%s_mcal_R' % model,
             '%s_mcal_Rpsf' % model]
    data=reredux.files.read_collated(args.run,
                                     #rows=arange(1000000),
                                     columns=columns)

    columns=['flags',
             '%s_mcal_R' % model,
             '%s_mcal_Rpsf' % model]
    corrdata=reredux.files.read_collated(args.corr_run,
                                         columns=columns)

    w,=numpy.where(data['flags']==0)
    wc,=numpy.where(corrdata['flags']==0)

    data=data[w]
    corrdata=corrdata[wc]

    res=average_shear(model, data, corrdata, args.nboot)

    print_shear(res, sconf['shear_true'])
    print_shear(res, sconf['shear_true'], type='median')

    write_averaged(res, args)

main()
