#!/usr/bin/env python
"""
usage: reredux-vary-deepsize run
"""
from __future__ import print_function
import os
import numpy
from numpy import dot, linalg
from argparse import ArgumentParser
import reredux
import ngmix
import fitsio

parser=ArgumentParser()

parser.add_argument('run',help='run identifier')
parser.add_argument('corr_run',help='run identifier for corrections')
parser.add_argument('deepsizes',help='csv list of sizes of deep subsets')

parser.add_argument('--nboot',type=int,help='use bootstrapping instead of independent samples')


def print_shear(deepsize, shear, shear_err, strue):
    mess=[str(deepsize)]
    s='s1: %.6f +/- %.6f   s2: %.6f +/- %.6f'
    s = s % (shear[0],
             shear_err[0],
             shear[1],
             shear_err[1])

    mess.append(s)
    if strue[0] != 0.0:
        s='frac1: %.3g +/- %.3g'
        s=s % (shear[0]/strue[0]-1, shear_err[0]/strue[0])
        mess.append(s)

    if strue[1] != 0.0:
        s='frac2: %.3g +/- %.3g'
        s=s % (shear[1]/strue[1]-1, shear_err[1]/strue[1])
        mess.append(s)

    mess=' '.join(mess)
    print(mess)


def average_shear(model, data, corrdata):
    res=ngmix.metacal.get_mean_shear(data['%s_mcal_g' % model],
                                     data['%s_mcal_gpsf' % model],
                                     corrdata['%s_mcal_R' % model],
                                     corrdata['%s_mcal_Rpsf' % model])

    return res


def average_shear_sub(model, g_mean, gpsf_mean, corrdata, deepsize):

    R=corrdata['%s_mcal_R' % model]
    Rpsf=corrdata['%s_mcal_Rpsf' % model]

    nchunk = corrdata.size/deepsize

    shears=numpy.zeros( (nchunk, 2))
    for i in xrange(nchunk):
        beg=i*deepsize
        end=(i+1)*deepsize
        print("%d  %d:%d" % (deepsize,beg,end))

        R_mean = R[beg:end,:,:].mean(axis=0)
        Rpsf_mean = Rpsf[beg:end,:].mean(axis=0)

        psf_corr = Rpsf_mean*gpsf_mean

        Rinv = linalg.inv(R_mean)
        shear = dot(Rinv, g_mean - psf_corr)

        shears[i,:] = shear

    shear=shears.mean(axis=0)
    shear_err = shears.std(axis=0)/numpy.sqrt(nchunk)

    return shear, shear_err

def average_shear_sub_boot(model, g_mean, gpsf_mean, corrdata, deepsize, nboot):

    R=corrdata['%s_mcal_R' % model]
    Rpsf=corrdata['%s_mcal_Rpsf' % model]
    nR = R.shape[0]

    shears=numpy.zeros( (nboot, 2))
    for i in xrange(nboot):
        print("%d  %d/%d" % (deepsize,i+1,nboot))

        rind = numpy.random.randint(0, nR, deepsize)

        R_mean = R[rind,:,:].mean(axis=0)
        Rpsf_mean = Rpsf[rind,:].mean(axis=0)

        psf_corr = Rpsf_mean*gpsf_mean

        Rinv = linalg.inv(R_mean)
        shear = dot(Rinv, g_mean - psf_corr)

        shears[i,:] = shear

    shear=shears.mean(axis=0)
    shear_err = shears.std(axis=0)/numpy.sqrt(nboot)

    return shear, shear_err


def main():
    args = parser.parse_args()

    dlist=[int(d) for d in args.deepsizes.split(',')]

    conf=reredux.files.read_config(args.run)
    sconf=reredux.files.read_config(conf['reredux_config'])

    # assuming only one model was fit
    model=conf['model_pars'].keys()[0]

    columns=['flags',
             '%s_mcal_g' % model,
             '%s_mcal_gpsf' % model]
    data=reredux.files.read_collated(args.run,
                                     columns=columns)

    columns=['flags',
             '%s_mcal_R' % model,
             '%s_mcal_Rpsf' % model]
    corrdata=reredux.files.read_collated(args.corr_run,
                                         columns=columns)

    w,=numpy.where(data['flags']==0)
    wc,=numpy.where(corrdata['flags']==0)

    data=data[w]
    corrdata=corrdata[wc]

    g = data['%s_mcal_g' % model]
    gpsf = data['%s_mcal_gpsf' % model]
    g_mean = g.mean(axis=0)
    gpsf_mean = gpsf.mean(axis=0)

    slist=[]
    elist=[]
    for deepsize in dlist:
        if args.nboot is not None:
            shear, shear_err=average_shear_sub_boot(model,
                                                    g_mean,
                                                    gpsf_mean,
                                                    corrdata,
                                                    deepsize,
                                                    args.nboot)
        else:
            shear, shear_err=average_shear_sub(model,
                                               g_mean,
                                               gpsf_mean,
                                               corrdata,
                                               deepsize)

        print_shear(deepsize, shear, shear_err, sconf['shear_true'])

        slist.append(shear)
        elist.append(shear_err)

    print('-'*70)
    for i,deepsize in enumerate(dlist):
        shear=slist[i]
        shear_err=elist[i]
        print_shear(deepsize, shear, shear_err, sconf['shear_true'])

main()
