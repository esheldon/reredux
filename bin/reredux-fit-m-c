#!/usr/bin/env python
from __future__ import print_function
import numpy
from argparse import ArgumentParser
import reredux
import fitsio
import esutil as eu

parser = ArgumentParser()

parser.add_argument('run', help='run to use in fit')

parser.add_argument('--show',action='store_true',help='show plot')
parser.add_argument('--yrange', help="yrange of plot")

parser.add_argument('--boot',action='store_true',help='bootstrap fits')
parser.add_argument('--nboot',type=int,
                    default=100,help='number of bootstraps')

parser.add_argument('--fit-only',action='store_true',
                    help='get the means from the written file')


SIGMA2_MIN_CONSTANT_GROUND = 4.     # 2**2
NORMALIZATION_CONSTANT_SPACE = 1.232
NORMALIZATION_CONSTANT_GROUND = NORMALIZATION_CONSTANT_SPACE

CFID = 2.e-4
MFID = 2.e-3

def calc_q(fits):

    m1=fits['m'][0,0]
    m2=fits['m'][0,1]
    c1=fits['c'][0,0]
    c2=fits['c'][0,1]

    sigma2_min = SIGMA2_MIN_CONSTANT_GROUND 
    norm = NORMALIZATION_CONSTANT_GROUND 

    num = 2000.0 * norm
    denom = numpy.sqrt(  (c1 / CFID)**2 
                       + (c2 / CFID)**2
                       + (m1 / MFID)**2
                       + (m2 / MFID)**2
                       + sigma2_min)

    Q = num/denom
    
    print("  Q: %g" % Q)

    return Q

def doplot(args, data, fits):
    import biggles

    Q=calc_q(fits)

    if args.yrange is not None:
        yrange=[float(r) for r in args.yrange.split(',')]
    else:
        yrange=[-0.01,0.01]

    tab=biggles.Table(1,2)
    tab.aspect_ratio=0.5

    diff = data['shear'] - data['shear_true']

    plts=[]
    for i in [0,1]:

        x = data['shear_true'][:,i]
        plt =biggles.plot(x,
                          diff[:,i],
                          #yerr=data['shear_err'][:,i],
                          xlabel='shear%d true' % (i+1,),
                          ylabel='shear%d diff' % (i+1,),
                          yrange=yrange,
                          visible=False)
        yfit=fits['m'][0,i]*x + fits['c'][0,i]

        c=biggles.Curve(x, yfit, color='red')
        z=biggles.Curve(x, x*0, color='black')
        plt.add(c,z)

        mstr='m%d: %.2g +/- %.2g' % (i+1,fits['m'][0,i],fits['merr'][0,i])
        cstr='c%d: %.2g +/- %.2g' % (i+1,fits['c'][0,i],fits['cerr'][0,i])
        mlab=biggles.PlotLabel(0.1,0.9,
                               mstr,
                               halign='left')
        clab=biggles.PlotLabel(0.1,0.85,
                               cstr,
                               halign='left')
        plt.add(mlab,clab)
        if i==0:
            Qstr='Q: %d' % (int(Q),)
            Qlab=biggles.PlotLabel(0.1,0.8,
                                   Qstr,
                                   halign='left')
            plt.add(Qlab)


        tab[0,i] = plt

    fname=reredux.files.get_fit_file(args.run,
                                     extra='fit-m-c',
                                     ext='eps')
    eu.ostools.makedirs_fromfile(fname)
    print("writing:",fname)
    tab.write_eps(fname)

    if args.show:
        tab.show(width=1000, height=1000)

def write_fits(args, fits):
    fname=reredux.files.get_fit_file(args.run, extra='fit-m-c')

    eu.ostools.makedirs_fromfile(fname)
    print("writing fit data to file:",fname)
    fitsio.write(fname, fits, clobber=True)


def read_data(conf, run):

    model=conf['model_pars'].keys()[0]

    columns=[
        '%s_mcal_g' % model,
        '%s_mcal_gpsf' % model,
        '%s_mcal_R' % model,
        '%s_mcal_Rpsf' % model,
        '%s_mcal_Rnoise' % model,
        '%s_mcal_Rpsf_noise' % model,
        'shear_index',
        'flags'
    ]
    data=reredux.files.read_collated(run, columns=columns)

    w,=numpy.where(data['flags']==0)
    data=data[w]

    return data



def get_mean_struct(n):
    dt=[('shear','f8',2),
        ('shear_true','f8',2),
        ('shear_err','f8',2)]

    means = numpy.zeros(n, dtype=dt)
    return means

def read_means(args):
    return reredux.files.read_fit_file(args.run,
                                       extra='shear-means')
def write_means(args, means):
    fname=reredux.files.get_fit_file(args.run,
                                     extra='shear-means')
    eu.ostools.makedirs_fromfile(fname)

    print("writing:",fname)
    fitsio.write(fname, means, clobber=True)


def print_shear(ind, num, shear, shear_err):
    mess="  %d: %d  %g +/- %g  %g +/- %g"
    tup=(ind, num, shear[0],shear_err[0], shear[1],shear_err[1])
    print(mess % tup)



def get_averages(conf, data):

    sconf=conf['sconf']
    shears = sconf['shear']['shears']

    model=conf['model_pars'].keys()[0]

    gfield = '%s_mcal_g' % model
    gpsf_field = '%s_mcal_gpsf' % model
    Rfield = '%s_mcal_R' % model
    Rpsf_field = '%s_mcal_Rpsf' % model

    Rnoise_field = '%s_mcal_Rnoise' % model
    Rpsf_noise_field = '%s_mcal_Rpsf_noise' % model

    g = data[gfield]
    gpsf = data[gpsf_field]

    Rvals = data[Rfield].copy()
    Rvals -= data[Rnoise_field].copy()
    R = Rvals.mean(axis=0)


    Rinv = numpy.linalg.inv(R)
    Rpsfvals = data[Rpsf_field].copy()
    Rpsfvals -= data[Rpsf_noise_field]

    #Rpsf = Rpsfvals.mean(axis=0)
    Rpsf = Rpsfvals

    uind = numpy.unique(data['shear_index'])
    nind = uind.size

    means=get_mean_struct(nind)

    for i,ind in enumerate(uind):
        print("shear index:",i)

        shear_true = shears[ind]

        w,=numpy.where(data['shear_index'] == ind)

        #psf_corr  = gpsf[w].mean(axis=0)*Rpsf
        psf_corr  = (gpsf[w]*Rpsf[w]).mean(axis=0)
        gmean     = g[w].mean(axis=0)
        shear     = numpy.dot(Rinv, gmean-psf_corr)
        shear_err = g[w].std(axis=0)/numpy.sqrt(w.size)
        shear_err = numpy.dot(Rinv, shear_err)

        means['shear'][i] = shear
        means['shear_err'][i] = shear_err
        means['shear_true'][i] = shear_true

        if False and (i % 10) == 0:
            print_shear(ind, w.size, shear, shear_err)

    return means

def print_m_c(sindex, m, merr, c, cerr):
    fmt = '  s%d m: %.3e +/- %.3e c: %.3e +/- %.3e'
    print(fmt % (sindex,m, merr, c, cerr))

def fit_m_c(data):
    import fitting
    import mcmc
    import esutil as eu

    strue = data['shear_true']
    sdiff = data['shear'] - data['shear_true']
    serr = data['shear_err']

    m = numpy.zeros(2)
    merr = numpy.zeros(2)
    c = numpy.zeros(2)
    cerr = numpy.zeros(2)

    fits=numpy.zeros(1, dtype=[('m','f8',2),
                               ('merr','f8',2),
                               ('c','f8',2),
                               ('cerr','f8',2)])
    for i in [0,1]:
        w,=numpy.where(strue[:,i] != 0.0)
        if w.size == 0:
            print("shear is zero, mean for all is")
            m,e=eu.stat.wmom(data['shear'][:,i],
                             1.0/data['shear_err'][:,i]**2,
                             calc_err=True)
            print("s%d: %.3e +/- %.3e" % (i+1,m,e))
        else:
            fit = fitting.fit_line(strue[:,i],
                                   sdiff[:,i],
                                   yerr=serr[:,i])
            res = fit.get_result()
            p=res['pars']
            perr=res['perr']

            print_m_c(i+1, p[0],perr[0],p[1],perr[1])

            fits['m'][0,i] = p[0]
            fits['merr'][0,i] = perr[0]
            fits['c'][0,i] = p[1]
            fits['cerr'][0,i] = perr[1]

    return fits

def fit_m_c_boot(fits, conf, data, nboot):

    nd=data.size

    mvals = numpy.zeros( (nboot,2) )
    cvals = numpy.zeros( (nboot,2) )

    for i in xrange(nboot):
        print("bootstrap: %d/%d" % (i+1,nboot))

        rind     = numpy.random.randint(0, nd, nd)

        means = get_averages(conf, data[rind])
        tfits=fit_m_c(means)

        mvals[i] = tfits['m']
        cvals[i] = tfits['c']

    mmean = mvals.mean(axis=0)
    cmean = cvals.mean(axis=0)
    merr = mvals.std(axis=0)
    cerr = cvals.std(axis=0)

    print("bootstrapped")
    for i in [0,1]:
        print_m_c(i+1, fits['m'][i], merr[i], fits['c'][i], cerr[i])

    newfits = fits.copy()
    newfits['merr'][0,:] = merr
    newfits['cerr'][0,:] = cerr

    return newfits

def fit_m_c_jack(fits, conf, data, nboot, chunksize=100):

    model=conf['model_pars'].keys()[0]

    gfield = '%s_mcal_g' % model
    gpsf_field = '%s_mcal_gpsf' % model
    Rfield = '%s_mcal_R' % model
    Rpsf_field = '%s_mcal_Rpsf' % model

    Rnoise_field = '%s_mcal_Rnoise' % model
    Rpsf_noise_field = '%s_mcal_Rpsf_noise' % model

    g = data[gfield]
    gpsf = data[gpsf_field]

    R = data[Rfield].copy()
    R -= data[Rnoise_field]
    R = Rvals.mean(axis=0)


    Rinv = numpy.linalg.inv(R)
    Rpsfvals = data[Rpsf_field].copy()
    Rpsfvals -= data[Rpsf_noise_field]

    #Rpsf = Rpsfvals.mean(axis=0)
    Rpsf = Rpsfvals




    nd=data.size

    mvals = numpy.zeros( (nboot,2) )
    cvals = numpy.zeros( (nboot,2) )

    for i in xrange(nboot):
        print("bootstrap: %d/%d" % (i+1,nboot))

        rind     = numpy.random.randint(0, nd, nd)

        means = get_averages(conf, data[rind])
        tfits=fit_m_c(means)

        mvals[i] = tfits['m']
        cvals[i] = tfits['c']

    mmean = mvals.mean(axis=0)
    cmean = cvals.mean(axis=0)
    merr = mvals.std(axis=0)
    cerr = cvals.std(axis=0)

    print("bootstrapped")
    for i in [0,1]:
        print_m_c(i+1, fits['m'][i], merr[i], fits['c'][i], cerr[i])

    newfits = fits.copy()
    newfits['merr'][0,:] = merr
    newfits['cerr'][0,:] = cerr

    return newfits


def main():
    args = parser.parse_args()

    conf=reredux.files.read_config(args.run)
    sconf=reredux.files.read_egret_config(conf['reredux_config'])

    conf['sconf'] = sconf


    # if only doing the fit, and not bootstrapping
    if args.fit_only and not args.boot:
        means = read_means(args)
    else:

        data=read_data(conf, args.run)

        means = get_averages(conf, data)
        write_means(args, means)

    fits=fit_m_c(means)


    if args.boot:
        fits = fit_m_c_boot(fits, conf, data, args.nboot)
    if args.jack:
        fits = fit_m_c_jack(fits, conf, data, args.nboot)

    write_fits(args, fits)

    doplot(args, means, fits)

main()
