#!/usr/bin/env python
from __future__ import print_function
import numpy
from argparse import ArgumentParser
import reredux

parser = ArgumentParser()

parser.add_argument('corr_run',help='run used for correction')
parser.add_argument('runs', nargs='+', help='runs to use in fit')

def load_data(corr_run, runs):

    dt = [('shear','f8',2),
          ('shear_err','f8',2),
          ('shear_true','f8',2)]

    nruns = len(runs)
    data = numpy.zeros(nruns, dtype=dt)

    for i,run in enumerate(runs):

        conf=reredux.files.read_config(run)
        sconf=reredux.files.read_config(conf['reredux_config'])

        t=reredux.files.read_averaged(run, corr_run)

        data['shear'][i] = t['shear'][0]
        data['shear_err'][i] = t['shear_err'][0]
        data['shear_true'][i] = sconf['shear_true']

    return data

def dofits(data):
    import fitting
    import mcmc
    import esutil as eu

    strue = data['shear_true']
    sdiff = data['shear'] - data['shear_true']
    serr = data['shear_err']

    fmt = 's%d m: %.3e +/- %.3e c: %.3e +/- %.3e'
    for i in [0,1]:
        w,=numpy.where(strue[:,i] != 0.0)
        if w.size == 0:
            print("shear is zero, mean for all is")
            m,e=eu.stat.wmom(data['shear'][:,i],
                             1.0/data['shear_err'][:,i]**2,
                             calc_err=True)
            print("s%d: %.3e +/- %.3e" % (i+1,m,e))
        else:
            fit = fitting.fit_line(strue[:,i],
                                   sdiff[:,i],
                                   yerr=serr[:,i])
            res = fit.get_result()
            p=res['pars']
            perr=res['perr']

            print(fmt % (i+1,p[0],perr[0],p[1],perr[1]))

            fitter=mcmc.PolyFitter(1,
                                   strue[:,i],
                                   sdiff[:,i],
                                   200,
                                   1000,
                                   1000,
                                   yerr=serr[:,i],
                                   guess=p)
            fitter.plot_trials()
            res=fitter.get_result()
            p=res['pars']
            perr=res['perr']

            print(fmt % (i+1,p[0],perr[0],p[1],perr[1]))


def main():
    args = parser.parse_args()

    data=load_data(args.corr_run, args.runs)

    dofits(data)

main()
