#!/usr/bin/env python
from __future__ import print_function
import numpy
from argparse import ArgumentParser
import reredux

parser = ArgumentParser()

parser.add_argument('run', help='run to use in fit')
parser.add_argument('refrun',help='run used for correction')

def read_data(conf, run):

    model=conf['model_pars'].keys()[0]

    columns=['%s_mcal_g' % model,
             '%s_mcal_gpsf' % model,
             'shear_index',
             'flags']
    data=reredux.files.read_collated(run, columns=columns)

    w,=numpy.where(data['flags']==0)
    data=data[w]

    return data


def read_refdata(conf, run):

    model=conf['model_pars'].keys()[0]

    columns=['%s_mcal_R' % model,
             '%s_mcal_Rpsf' % model,
             'flags']

    data=reredux.files.read_collated(run, columns=columns)

    w,=numpy.where(data['flags']==0)
    data=data[w]

    return data


def get_mean_struct(n):
    dt=[('shear','f8',2),
        ('shear_true','f8',2),
        ('shear_err','f8',2)]

    means = numpy.zeros(n, dtype=dt)
    return means

def print_shear(ind, num, shear, shear_err):
    mess="  %d: %d  %g +/- %g  %g +/- %g"
    tup=(ind, num, shear[0],shear_err[0], shear[1],shear_err[1])
    print(mess % tup)



def get_averages(conf, data, refdata):

    sconf=reredux.files.read_egret_config(conf['reredux_config'])
    shears = sconf['shear']['shears']

    model=conf['model_pars'].keys()[0]

    gfield = '%s_mcal_g' % model
    gpsf_field = '%s_mcal_gpsf' % model
    Rfield = '%s_mcal_R' % model
    Rpsf_field = '%s_mcal_Rpsf' % model

    g = data[gfield]
    gpsf = data[gpsf_field]

    R = refdata[Rfield].mean(axis=0)
    Rinv = numpy.linalg.inv(R)
    Rpsf = refdata[Rpsf_field].mean(axis=0)

    uind = numpy.unique(data['shear_index'])
    nind = uind.size

    means=get_mean_struct(nind)

    for i,ind in enumerate(uind):

        shear_true = shears[ind]

        w,=numpy.where(data['shear_index'] == ind)

        psf_corr  = gpsf[w].mean(axis=0)*Rpsf
        gmean     = g[w].mean(axis=0)
        shear     = numpy.dot(Rinv, gmean-psf_corr)
        shear_err = g[w].std(axis=0)/numpy.sqrt(w.size)
        shear_err = numpy.dot(Rinv, shear_err)

        means['shear'][i] = shear
        means['shear_err'][i] = shear_err
        means['shear_true'][i] = shear_true

        if (i % 10) == 0:
            print_shear(ind, w.size, shear, shear_err)

    return means

def fit_m_c(data):
    import fitting
    import mcmc
    import esutil as eu

    strue = data['shear_true']
    sdiff = data['shear'] - data['shear_true']
    serr = data['shear_err']

    fmt = 's%d m: %.3e +/- %.3e c: %.3e +/- %.3e'

    fits=[]
    for i in [0,1]:
        w,=numpy.where(strue[:,i] != 0.0)
        if w.size == 0:
            print("shear is zero, mean for all is")
            m,e=eu.stat.wmom(data['shear'][:,i],
                             1.0/data['shear_err'][:,i]**2,
                             calc_err=True)
            print("s%d: %.3e +/- %.3e" % (i+1,m,e))
        else:
            fit = fitting.fit_line(strue[:,i],
                                   sdiff[:,i],
                                   yerr=serr[:,i])
            res = fit.get_result()
            p=res['pars']
            perr=res['perr']

            print(fmt % (i+1,p[0],perr[0],p[1],perr[1]))

            fitpars={'m':p[0],
                     'merr':perr[0],
                     'c':p[1],
                     'cerr':perr[1]}
            fits.append(fitpars)


    return fits

def main():
    args = parser.parse_args()

    conf=reredux.files.read_config(args.run)

    data=read_data(conf, args.run)
    refdata=read_refdata(conf, args.refrun)

    means = get_averages(conf, data, refdata)
    fits=fit_m_c(means)

main()
