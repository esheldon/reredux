#!/usr/bin/env python
from __future__ import print_function
import numpy
from argparse import ArgumentParser
import reredux
import fitsio
import esutil as eu

parser = ArgumentParser()

parser.add_argument('run', help='run to use in fit')

parser.add_argument('--cuts', help="cuts to apply")
parser.add_argument('--select-cosmos', action='store_true',
                    help="select good cosmos galaxies")

parser.add_argument('--weights',help='weights to use')

parser.add_argument('--show',action='store_true',help='show plot')
parser.add_argument('--yrange', help="yrange of plot")
parser.add_argument('--xrange', help="xrange of plot")

parser.add_argument('--fit-only',action='store_true',
                    help='get the means from the written file')

parser.add_argument('--cache',action='store_true',
                    help=('cache the file subset locally; use the cache '
                          'if available'))

parser.add_argument('--test',action='store_true',
                    help='do a quick test with a subset of rows')
parser.add_argument('--ntest',default=100000,type=int,
                    help='size of teset')


def main():
    args = parser.parse_args()
    cls = reredux.averaging.AveragerDetrend
    av=cls(
        args.run,
        weights=args.weights,
        show=args.show,
    )

    if not args.fit_only:
        data, sel = av.read_data(
            cache=args.cache,
            test=args.test,
            ntest=args.ntest,
            select_cosmos=args.select_cosmos,
            cuts=args.cuts,
        )
        av.do_averages(data, sel=sel)

    av.do_fits()
    av.doplot(args)

main()
