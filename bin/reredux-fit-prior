#!/usr/bin/env python
from __future__ import print_function
import os
import numpy
import ngmix
from ngmix.gmix import GMixND
import reredux
from reredux import files

from argparse import ArgumentParser
parser=ArgumentParser(__doc__)

parser.add_argument('run',help='sim run')
parser.add_argument('field',help='var to fit, e.g. exp_pars, coadd_exp_pars')
parser.add_argument('field_id',type=int, help='e.g. 4 for T, 5 for flux')
parser.add_argument('ngauss',type=int,help='number of gaussians to fit')
parser.add_argument('name',help='name for output, e.g. log_T')


class PriorFitter(object):
    def __init__(self, run, field, field_id, ngauss, name):
        self.run=run
        self.field=field
        self.field_id=field_id
        self.ngauss=ngauss
        self.name=name

    def go(self):
        self.make_dir()
        self.read_data()
        self.fit_prior()
        self.make_plot()
        self.make_plot(cov_fac=1.5)
        self.make_plot(ylog=True)
        self.write_prior()

    def make_dir(self):
        dir = files.get_fitprior_dir(self.run)
        if not os.path.exists(dir):
            os.makedirs(dir)

    def fit_prior(self):

        print("fitting",self.ngauss,"gaussians to",self.field)

        gm = GMixND()

        gm.fit(self.data, self.ngauss, min_covar=1.0e-6)

        self.prior = gm

    def write_prior(self):
        url = files.get_fitprior_file(self.run, self.name, ext='fits')
        print("writing to:",url)
        self.prior.save_mixture(url)

    def make_plot(self, ylog=False, cov_fac=None):
        import biggles
        eps = files.get_fitprior_file(self.run, self.name, ext='eps')
        
        nrand=1000000
        if cov_fac is not None:
            p=GMixND(weights=self.prior.weights,
                     means=self.prior.means,
                     covars=self.prior.covars*cov_fac)
        else:
            p=self.prior

        r=p.sample(nrand)

        h=biggles.make_histc(self.data, nbin=100, ylog=ylog, norm=1)
        hr=biggles.make_histc(r, nbin=100, ylog=ylog, color='red', norm=1)

        h.label='data'
        hr.label='model'

        key=biggles.PlotKey(0.9,0.9,[h,hr], halign='right')

        plt=biggles.FramedPlot()
        plt.xlabel=self.name
        plt.add(h, hr, key)
        plt.ylog=ylog

        if ylog:
            eps=eps.replace('.eps','-ylog.eps')
        if cov_fac is not None:
            eps=eps.replace('.eps','-cov-fac-%.2f.eps' % cov_fac)


        print("writing plot:",eps)
        plt.write_eps(eps)


    def read_data(self):
        data=files.read_collated(self.run)

        g = numpy.sqrt(data[self.field][:,2]**2 + data[self.field][:,3]**2)
        w,=numpy.where((data['flags']==0) & (g < 0.99) )
        print("kept %d/%d with g < 0.99" % (w.size, data.size))

        data=data[w]

        fdata = data[self.field][:,self.field_id]

        self.data = fdata

def main():
    args = parser.parse_args()

    fitter=PriorFitter(args.run, args.field, args.field_id,
                       args.ngauss, args.name)
    fitter.go()

main()
